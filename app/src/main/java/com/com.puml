@startuml

title __COM's Class Diagram__\n

namespace com {

  namespace com.level {
    class com.level.Board {
        - board : Field[][]
        - graph : AdjacencyList<Field>
        - sizeX : int
        - sizeY : int
        + Board()
        - initBoard()
        - initGraph()
    }
  }


  namespace com.level {
    class com.level.Field {
        - status : boolean
        + getStatus()
        + setStatus()
    }
  }


  namespace com.level {
    class com.level.Level {
        - board : Board
        + Level()
        - initBoard()
    }
  }





  namespace com.model {
    class com.model.AdjacencyList {
        ~ vertices : HashSet<Vertex<T>>
        + addEdge()
        + addVertex()
        + getAllVertices()
        + getNeighbours()
        + removeEdge()
        + removeVertex()
        - getVertex()
    }
  }


  namespace com.model {
    class com.model.AdjacencyList.Vertex {
        - self : S
        - neighbours : ArrayList<S>
        + Vertex()
        + same()
    }
  }


  com.model.AdjacencyList *-down- com.model.AdjacencyList.Vertex
  com.level.Board o-down- com.model.AdjacencyList
  com.level.Field -down-* com.level.Board


  namespace com.pawns {
    abstract class com.pawns.Attack {
        - magnitude : byte
        - range : byte
        - type : AttackType
    }
  }


  namespace com.pawns {
    enum AttackType {
      HEALTH
      SIZE
      SPEED
    }
  }


  namespace com.pawns {
    class com.pawns.Bite {
        ~ doAttack()
    }
  }


  namespace com.pawns {
    class com.pawns.Body {
        - head : Pawn
        - position : Position
        + Body()
    }
  }


  namespace com.pawns {
    class com.pawns.Bug {
        ~ attack()
        ~ move()
    }
  }


  namespace com.pawns {
    abstract class com.pawns.Pawn {
        - attack1 : Attack
        - attack2 : Attack
        - maxHealth : int
        - mvRange : int
        - speed : int
        + Pawn()
        {abstract} ~ attack()
        {abstract} ~ move()
    }
  }


  namespace com.pawns {
    class com.pawns.PawnSegment {
    }
  }


  namespace com.pawns {
    class com.pawns.Position {
        - x : int
        - y : int
        + getX()
        + getY()
        + setX()
        + setY()
        ~ Position()
    }
  }


  com.pawns.Pawn -down-o com.level.Field
  com.pawns.Pawn *-down- com.pawns.Position


  namespace com.player {
    class com.player.PawnType {
    }
  }
  namespace com.player {
    class com.player.Player {
        ~ catalogue : ArrayList<PawnType>
    }
  }


}
@enduml