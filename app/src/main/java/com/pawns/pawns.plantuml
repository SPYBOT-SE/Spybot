@startuml

title __PAWNS's Class Diagram__\n

  namespace  {
    namespace om.pawns {
      abstract class com.pawns.Attack {
          - magnitude : byte
          - range : byte
      }
    }
  }
  

  namespace  {
    namespace om.pawns {
      enum AttackType {
        HEALTH
        SIZE
        SPEED
      }
    }
  }
  

  namespace  {
    namespace om.pawns {
      class com.pawns.Bite {
          ~ doAttack()
      }
    }
  }
  

  namespace  {
    namespace om.pawns {
      class com.pawns.Body {
          + Body()
      }
    }
  }
  

  namespace  {
    namespace om.pawns {
      class com.pawns.Bug {
          ~ attack()
          ~ move()
      }
    }
  }
  

  namespace  {
    namespace om.pawns {
      abstract class com.pawns.Pawn {
          - maxHealth : int
          - mvRange : int
          - speed : int
          + Pawn()
          {abstract} ~ attack()
          {abstract} ~ move()
      }
    }
  }
  

  namespace  {
    namespace om.pawns {
      class com.pawns.PawnSegment {
      }
    }
  }
  

  namespace  {
    namespace om.pawns {
      class com.pawns.Position {
          - x : int
          - y : int
          + getX()
          + getY()
          + setX()
          + setY()
          ~ Position()
      }
    }
  }
  

  com.pawns.Attack o-- com.pawns.AttackType : type
  com.pawns.Bite -up-|> com.pawns.Attack
  com.pawns.Body o-- com.pawns.Pawn : head
  com.pawns.Body o-- com.pawns.Position : position
  com.pawns.Bug -up-|> com.pawns.Pawn
  com.pawns.Pawn o-- com.pawns.Attack : attack1
  com.pawns.Pawn o-- com.pawns.Attack : attack2


right footer


PlantUML diagram generated by SketchIt! (https://bitbucket.org/pmesmeur/sketch.it)
For more information about this tool, please contact philippe.mesmeur@gmail.com
endfooter

@enduml
